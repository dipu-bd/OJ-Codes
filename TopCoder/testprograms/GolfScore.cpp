/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//#include <bits/stdc++.h>
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vii;
typedef vector<pii> vpii;
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define memsz(a,b,n) memset(a, b, n * sizeof(*a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
//io
#define sf scanf
#define pf printf
#define sf1(a) scanf("%d", &a)
#define sf2(a, b) scanf("%d %d", &a, &b)
#define sf3(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define sf4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d);
#define debug1(a) cout << a << endl
#define debug2(a,b) cout << a << " " << b << endl
#define debug3(a,b,c) cout << a << " " << b << " " << c << endl
#define debug4(a,b,c,d) cout << a << " " << b << " " << c << " " << d << endl
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ins insert
#define IT iterator
#define allof(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB lower_bound
#define UB upper_bound
#define POPC __builtin_popcount
#define loop(i, x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x).rbegin(); i!=(x).rend(); ++i)
//variables and functions
const double PI = 2.0 * acos(0.0);
const double EXP1 = exp(1);
template<typename T> inline T sqr(T n) { return n * n; }
inline double hypot(double x, double y) { return sqrt(sqr(x) + sqr(y)); }
template<typename T> inline T pmod(T n, T m) { return ((n % m) + m) % m; }
template<typename T> T power(T n, int p) { return (p == 0) ? (T)(1) : (sqr(power(n, p >> 1)) * ((p & 1) * (n - 1) + 1)); }
template<typename T> T bigmod(T n, int p, T m) { return (p == 0) ? (T)(1) : ((sqr(bigmod(n, p >> 1, m)) % m) * ((p & 1) * (n - 1) % m + 1)) % m; }
/*--------------------------------------------------------------------------------*/

class GolfScore {
public:
	int tally(vector <int> parValues, vector <string> scoreSheet) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GolfScore *obj;
	int answer;
	obj = new GolfScore();
	clock_t startTime = clock();
	answer = obj->tally(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bogey","bogey","bogey","bogey","bogey","bogey","bogey","bogey","bogey","eagle","eagle","eagle","eagle","eagle","eagle","eagle","eagle","eagle"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 45;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,2,4,2,2,1,1,1,3,2,4,4,4,2,3,1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bogey","double bogey","par","double bogey","double bogey","triple bogey","triple bogey","triple bogey","bogey","double bogey","par","par","par","double bogey","bogey","triple bogey","bogey","double bogey"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 72;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,2,4,2,2,1,1,1,3,2,4,4,4,2,3,1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"eagle","birdie","albatross","birdie","birdie","par","hole in one","par","eagle","birdie","albatross","albatross","albatross","birdie","eagle","hole in one","eagle","birdie"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 18;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {4,1,3,3,4,4,1,4,2,3,3,5,4,1,4,4,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"triple bogey","triple bogey","bogey","par","triple bogey","double bogey","triple bogey","triple bogey","par","eagle","bogey","bogey","birdie","par","triple bogey","eagle","triple bogey","triple bogey"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 77;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// 
// 
// A full-sized golf course consists of 18 lawns known as holes. The player's
// objective is to strike a ball with his club in such a way that it travels
// from a specified point at one end of the lawn to a specified point at
// the other, and to do so with as few strokes as he can. Associated with
// each hole is a positive number, the par, which is the number of strokes
// it is expected to take a competent golfer to complete the hole.
// 
// 
// 
// A player's performance on an individual hole is described by
// a phrase that depends on the number of strokes he took relative to
// par. To make a "bogey", for example, means that the player has completed
// a hole in one stroke more than the par value, and a "double bogey" is
// two strokes over par. Two strokes under par, on the other hand, is an
// "eagle", while the "albatross", a rare bird indeed, is three strokes
// under par. The following is a complete dictionary of scoring phrases.
// 
// 
// 
// 
//     
//     "triple bogey"  three strokes over par
//     "double bogey"  two strokes over par
//     "bogey"         one stroke over par
//     "par"           exactly par 
//     "birdie"        one stroke under par
//     "eagle"         two strokes under par
//     "albatross"     three strokes under par
//     "hole in one"   exactly one stroke
// 
// 
//  
// 
// The managers of Gravel Mountain Golf Course have contracted you to
// implement a score-management system that will translate a single player's
// scores from the above jargon to a numerical total. You are given a
// vector <int> specifying the par value of each of the course's
// 18 holes in playing order. You are also given a vector <string>
// such that the nth string describes the player's
// score on the nth hole.  The reported scores will be valid
// and complete. Compute the player's total score and return it as an
// int.
// 
// 
// 
// 
// DEFINITION
// Class:GolfScore
// Method:tally
// Parameters:vector <int>, vector <string>
// Returns:int
// Method signature:int tally(vector <int> parValues, vector <string> scoreSheet)
// 
// 
// CONSTRAINTS
// -parValues and scoreSheet each contain exactly 18 elements
// -each element of parValues is between 1 and 5, inclusive
// -each element of scoreSheet is one of the eight phrases listed above
// -no element of scoreSheet describes an impossible score
// 
// 
// EXAMPLES
// 
// 0)
// {1, 1, 1, 1, 1, 1,
//  1, 1, 1, 5, 5, 5,
//  5, 5, 5, 5, 5, 5}
// {"bogey", "bogey", "bogey", "bogey", "bogey", "bogey",
//  "bogey", "bogey", "bogey", "eagle", "eagle", "eagle",
//  "eagle", "eagle", "eagle", "eagle", "eagle", "eagle"}
// 
// Returns: 45
// 
// The player took 9*2 = 18 strokes on the front nine and 9*3 = 27 on the back nine for a total score of 18+27 = 45.
// 
// 1)
// {3, 2, 4, 2, 2, 1,
//  1, 1, 3, 2, 4, 4,
//  4, 2, 3, 1, 3, 2}
// {"bogey", "double bogey", "par", "double bogey", "double bogey", "triple bogey",
//  "triple bogey", "triple bogey", "bogey", "double bogey", "par", "par",
//  "par", "double bogey", "bogey", "triple bogey", "bogey", "double bogey"}
// 
// Returns: 72
// 
// This player takes four strokes on every hole.
// 
// 2)
// {3, 2, 4, 2, 2, 1,
//  1, 1, 3, 2, 4, 4,
//  4, 2, 3, 1, 3, 2}
// {"eagle", "birdie", "albatross", "birdie", "birdie", "par",
//  "hole in one", "par", "eagle", "birdie", "albatross", "albatross",
//  "albatross", "birdie", "eagle", "hole in one", "eagle", "birdie"}
// 
// Returns: 18
// 
// This can only be Tiger Woods.
// 
// 3)
// {4, 1, 3, 3, 4, 4,
//  1, 4, 2, 3, 3, 5,
//  4, 1, 4, 4, 2, 1}
// {"triple bogey", "triple bogey", "bogey", "par", "triple bogey", "double bogey",
//  "triple bogey", "triple bogey", "par", "eagle", "bogey", "bogey",
//  "birdie", "par", "triple bogey", "eagle", "triple bogey", "triple bogey"}
// 
// Returns: 77
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
