/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//#include <bits/stdc++.h>
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vii;
typedef vector<pii> vpii;
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define memsz(a,b,n) memset(a, b, n * sizeof(*a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
//io
#define sf scanf
#define pf printf
#define sf1(a) scanf("%d", &a)
#define sf2(a, b) scanf("%d %d", &a, &b)
#define sf3(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define sf4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d);
#define debug1(a) cout << a << endl
#define debug2(a,b) cout << a << " " << b << endl
#define debug3(a,b,c) cout << a << " " << b << " " << c << endl
#define debug4(a,b,c,d) cout << a << " " << b << " " << c << " " << d << endl
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ins insert
#define IT iterator
#define allof(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB lower_bound
#define UB upper_bound
#define POPC __builtin_popcount
#define loop(i, x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x).rbegin(); i!=(x).rend(); ++i)
//variables and functions
const double PI = 2.0 * acos(0.0);
const double EXP1 = exp(1);
template<typename T> inline T sqr(T n) { return n * n; }
inline double hypot(double x, double y) { return sqrt(sqr(x) + sqr(y)); }
template<typename T> inline T pmod(T n, T m) { return ((n % m) + m) % m; }
template<typename T> T power(T n, int p) { return (p == 0) ? (T)(1) : (sqr(power(n, p >> 1)) * ((p & 1) * (n - 1) + 1)); }
template<typename T> T bigmod(T n, int p, T m) { return (p == 0) ? (T)(1) : ((sqr(bigmod(n, p >> 1, m)) % m) * ((p & 1) * (n - 1) % m + 1)) % m; }
/*--------------------------------------------------------------------------------*/

class Quipu {
public:
	int readKnots(string knots) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Quipu *obj;
	int answer;
	obj = new Quipu();
	clock_t startTime = clock();
	answer = obj->readKnots(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "-XX-XXXX-XXX-";
	p1 = 243;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "-XX--XXXX---XXX-";
	p1 = 204003;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "-X-";
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-X-------";
	p1 = 1000000;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-XXXXXXXXX--XXXXXXXXX-XXXXXXXXX-XXXXXXX-XXXXXXXXX-";
	p1 = 909979;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The Incas used a sophisticated system of record keeping consisting of bundles of knotted cords.
// Such a bundle of cords is called a quipu.  Each individual cord represents a single number.
// Surprisingly, the Incas used a base-10 positional system, just like we do today.  Each digit of a number 
// is represented by a cluster of adjacent knots, with spaces between neighboring clusters.  The digit is 
// determined by the number of knots in the cluster.
// For example, the number 243 would be represented by a cord with knots tied in the following pattern
// 
// 
//      -XX-XXXX-XXX-
// 
// where each uppercase 'X' represents a knot and each '-' represents an unknotted segment of cord (all quotes for clarity only).
// 
// 
// Unlike many ancient civilizations, the Incas were aware of the concept of zero, and used it in their quipus.
// A zero is represented by a cluster containing no knots.
// For example, the number 204003 would be represented by a cord with knots tied in the following pattern
// 
// 
//      -XX--XXXX---XXX-
//         ^^    ^^^
//         ^^    ^^^
//         ^^    two zeros between these three segments
//         ^^
//         one zero between these two segments
// 
// Notice how adjacent dashes signal the presence of a zero.
// 
// 
// Your task is to translate a single quipu cord into an integer.  The cord will be given as a string knots
// containing only the characters 'X' and '-'.  There will be a single '-' between each cluster 
// of 'X's, as well as a leading '-' and a trailing '-'.  The first cluster will not be empty.
// 
// 
// DEFINITION
// Class:Quipu
// Method:readKnots
// Parameters:string
// Returns:int
// Method signature:int readKnots(string knots)
// 
// 
// CONSTRAINTS
// -knots contains between 3 and 50 characters, inclusive.
// -knots contains only the characters 'X' and '-'.  Note that 'X' is uppercase.
// -The first and last characters of knots are '-'s.  The second character is 'X'.
// -knots does not contain 10 consecutive 'X's.
// -knots will represent a number between 1 and 1000000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "-XX-XXXX-XXX-"
// 
// Returns: 243
// 
// The first example above.
// 
// 1)
// "-XX--XXXX---XXX-"
// 
// Returns: 204003
// 
// The second example above.
// 
// 2)
// "-X-"
// 
// Returns: 1
// 
// 3)
// "-X-------"
// 
// Returns: 1000000
// 
// 4)
// "-XXXXXXXXX--XXXXXXXXX-XXXXXXXXX-XXXXXXX-XXXXXXXXX-"
// 
// Returns: 909979
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
