/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vii;
typedef vector<pii> vpii;
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define memsz(a,b,n) memset(a, b, n * sizeof(*a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
#define sf1(a) scanf("%d", &a)
#define sf2(a, b) scanf("%d %d", &a, &b)
#define sf3(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define sf4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d);
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ins insert
#define IT iterator
#define allof(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB lower_bound
#define UB upper_bound
#define POPC __builtin_popcount
#define loop(i, x) for(__typeof((x).begin()) i=(x.begin()); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x.rbegin()); i!=(x).rend(); ++i)
//variables and functions
const double PI = 2.0 * acos(0.0);
const double EXP1 = exp(1);
template<typename T> inline T sqr(T n) { return n * n; }
inline double hypot(double x, double y) { return sqrt(sqr(x) + sqr(y)); }
template<typename T> inline T pmod(T n, T m) { return ((n % m) + m) % m; }
/*--------------------------------------------------------------------------------*/

class TroytownKeeper {

public:
	int limeLiters(vector<string> maze)
	{
	    int cnt = 0;
	    int row = maze.size() - 1;
	    int col = maze[0].size() - 1;

	    REPE(i, 0, row)
	    {
	        if(maze[i][0] == '.')
                cnt += dfs(maze, i, 0);
            else if(maze[i][0] == '#') ++cnt;

            if(maze[i][col] == '.')
                cnt += dfs(maze, i, col);
            else if(maze[i][col] == '#') ++cnt;
	    }

	    REPE(j, 0, col)
	    {
	        if(maze[0][j] == '.')
                cnt += dfs(maze, 0, j);
            else if(maze[0][j] == '#') ++cnt;

            if(maze[row][j] == '.')
                cnt += dfs(maze, row, j);
            else if(maze[row][j] == '#') ++cnt;
	    }

	    return cnt;
	}

    int dfs(vector<string>& maze, int i, int j)
    {
        int cnt = 0;
	    int row = maze.size() - 1;
	    int col = maze[0].size() - 1;

        if(i < 0 || j < 0 || i > row || j > col) return 0;
        if(maze[i][j] == 'v') return 0;
        if(maze[i][j] == '#') return 1;

        maze[i][j] = 'v';
        cnt += dfs(maze, i + 1, j);
        cnt += dfs(maze, i - 1, j);
        cnt += dfs(maze, i, j + 1);
        cnt += dfs(maze, i, j - 1);

        return cnt;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TroytownKeeper *obj;
	int answer;
	obj = new TroytownKeeper();
	clock_t startTime = clock();
	answer = obj->limeLiters(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"##..#","#.#.#","#.#.#","#####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 24;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"##","##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"######","#.....","#.####","#.#..#","#.##.#","#....#","######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 56;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"######","#.....","#..#..","#.....","######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"#.#.#.#",".#.#.#.","#.#.#.#",".#.#.#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// People enjoy mazes, but they also get them dirty.
// Arrows, graffiti, and chewing gum are just a few of the souvenirs people leave on the walls.
// You, the maze keeper, are assigned to whiten the maze walls.
// Each face of the wall requires one liter of paint, but you are only required to paint visible faces.
// You are given a map of the maze, and you must determine the amount of paint needed for the job.
//
//
// The maze is described by a vector <string> maze, where each character can be either '#' (a wall) or '.' (an empty space).
//
// All '.' characters on the perimeter of the map are considered entrances to the maze.
// Upon entering the maze, one can only move horizontally and vertically through empty spaces, and areas that are not reachable by these movements are not considered visible.
//
// Each '#' represents a square block with four wall faces (each side of the square is a face).
// A face is visible if it is not directly adjacent to another wall (and is in a reachable area of the maze).
// For example, two adjacent blocks can have at most six visible faces since two of their faces are directly adjacent to each other.
// All exterior faces on the perimeter are considered visible.
//
//
//
//
// 	For example, the following picture represents a trivial maze with just one (wide) entrance and only four empty reachable spaces:
//
//
//
//
//
//
//
// 	To whiten this maze you must paint the faces highlighted in yellow above: 16 for its perimeter,
// 	plus 8 interior faces. Note that there are faces that are not visible and thus need not be painted.
//
//
// DEFINITION
// Class:TroytownKeeper
// Method:limeLiters
// Parameters:vector <string>
// Returns:int
// Method signature:int limeLiters(vector <string> maze)
//
//
// CONSTRAINTS
// -maze will contain between 1 and 50 elements, inclusive.
// -Each element of maze will contain between 1 and 50 characters, inclusive.
// -All elements of maze will have the same number of characters.
// -All characters in maze will be either '.' or '#'.
//
//
// EXAMPLES
//
// 0)
// {"##..#"
// ,"#.#.#"
// ,"#.#.#"
// ,"#####"}
//
// Returns: 24
//
// Example from the problem statement.
//
// 1)
// {"##",
//  "##"}
//
// Returns: 8
//
// Only the perimeter of the maze (which has no interior!) has to be painted.
//
// 2)
// {"######"
// ,"#....."
// ,"#.####"
// ,"#.#..#"
// ,"#.##.#"
// ,"#....#"
// ,"######"}
//
// Returns: 56
//
// 3)
// {"######"
// ,"#....."
// ,"#..#.."
// ,"#....."
// ,"######"}
//
// Returns: 36
//
// 4)
// {"#.#.#.#"
// ,".#.#.#."
// ,"#.#.#.#"
// ,".#.#.#."}
//
// Returns: 36
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
