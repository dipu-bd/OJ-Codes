/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vii;
//some constants
const double PI = 2.0 * acos(0.0);
const double E = exp(1);
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
//useful with graphs
#define _a first
#define _b second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define _IT ::iterator
#define all(v) v.begin(), v.end()
#define ssort(v) stable_sort(all(v))
#define loop(typ,it,v) for(typ::iterator it = v.begin(); it != v.end(); ++it)
#define rloop(typ,it,v) for(typ::reverse_iterator it = v.rbegin(); it != v.rend(); ++it)
#define cloop(typ,it,v) for(typ::const_iterator it = v.begin(); it != v.end(); ++it)
#define rcloop(typ,it,v) for(typ::const_reverse_iterator it = v.rbegin(); it != v.rend(); ++it)


class SimpleCompressor
{
public:
    stack <int> st;
    string tmp ;
    string res;
    string uncompress(string toUncompress)
    {
        int len = int(size(toUncompress));
        res = tmp = "";

        for(int i = 0; i < len; i++)
        {
            char &ch = toUncompress[i];
            if(isalpha(ch)) res += ch;
            else if(ch == '[')
            {
                while(toUncompress[i] != ']')
                {


                }
            }

        }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    SimpleCompressor *obj;
    string answer;
    obj = new SimpleCompressor();
    clock_t startTime = clock();
    answer = obj->uncompress(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "C[6AB]C";
        p1 = "CABABABABABABC";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "C[2[3AB]]C";
        p1 = "CABABABABABABC";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "CO[1N]TEST";
        p1 = "CONTEST";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "[2[2AB]]";
        p1 = "ABABABAB";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "AAAAAAAAAAAAAAAAAAAAA";
        p1 = "AAAAAAAAAAAAAAAAAAAAA";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// A simple way to compress a string is to encode repeated consecutive substrings as a counter followed by the substring.  For example, if X represents a substring, and the string contains a sequence "XX...X", we can compress the sequence as "[DX]", where D is the number of times X is repeated (D is a single digit, i.e., 1 <= D <= 9).  X itself might contain some compressed substrings as well.  For example, the string "CABABABABABABC" can be compressed as "C[6AB]C" or "C[2[3AB]]C".  You are given a string toUncompress.  Uncompress toUncompress and return the result.  The uncompressed string will contain only uppercase letters ('A'-'Z').
//
//
// DEFINITION
// Class:SimpleCompressor
// Method:uncompress
// Parameters:string
// Returns:string
// Method signature:string uncompress(string toUncompress)
//
//
// CONSTRAINTS
// -The return value will contain between 1 and 1000 characters, inclusive.
// -The return value will contain only uppercase letters ('A'-'Z').
// -toUncompress will contain between 1 and 50 characters, inclusive.
// -toUncompress will contain only uppercase letters ('A'-'Z'), digits ('1'-'9'), and brackets ('[' and ']').
// -toUncompress will be a properly compressed string.
// -In each occurrence of "[DX]", D will be a single digit, between 1 and 9, inclusive.
// -In each occurrence of "[DX]", X will be a non-empty string.
//
//
// EXAMPLES
//
// 0)
// "C[6AB]C"
//
// Returns: "CABABABABABABC"
//
//
//
// 1)
// "C[2[3AB]]C"
//
// Returns: "CABABABABABABC"
//
//
//
// 2)
// "CO[1N]TEST"
//
// Returns: "CONTEST"
//
//
//
// 3)
// "[2[2AB]]"
//
// Returns: "ABABABAB"
//
//
//
// 4)
// "AAAAAAAAAAAAAAAAAAAAA"
//
// Returns: "AAAAAAAAAAAAAAAAAAAAA"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
