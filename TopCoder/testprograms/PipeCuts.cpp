/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//#include <bits/stdc++.h>
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vii;
typedef vector<pii> vpii;
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define memsz(a,b,n) memset(a, b, n * sizeof(*a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
//io
#define sf scanf
#define pf printf
#define sf1(a) scanf("%d", &a)
#define sf2(a, b) scanf("%d %d", &a, &b)
#define sf3(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define sf4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d);
#define debug1(a) cout << a << endl
#define debug2(a,b) cout << a << " " << b << endl
#define debug3(a,b,c) cout << a << " " << b << " " << c << endl
#define debug4(a,b,c,d) cout << a << " " << b << " " << c << " " << d << endl
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ins insert
#define IT iterator
#define allof(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB lower_bound
#define UB upper_bound
#define POPC __builtin_popcount
#define loop(i, x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x).rbegin(); i!=(x).rend(); ++i)
//variables and functions
const double PI = 2.0 * acos(0.0);
const double EXP1 = exp(1);
template<typename T> inline T sqr(T n) { return n * n; }
inline double hypot(double x, double y) { return sqrt(sqr(x) + sqr(y)); }
template<typename T> inline T pmod(T n, T m) { return ((n % m) + m) % m; }
template<typename T> T power(T n, int p) { return (p == 0) ? (T)(1) : (sqr(power(n, p >> 1)) * ((p & 1) * (n - 1) + 1)); }
template<typename T> T bigmod(T n, int p, T m) { return (p == 0) ? (T)(1) : ((sqr(bigmod(n, p >> 1, m)) % m) * ((p & 1) * (n - 1) % m + 1)) % m; }
/*--------------------------------------------------------------------------------*/

class PipeCuts
{
public:
    double probability(vector <int> weldLocations, int L)
    {
        int cnt = 0;

        ssort(weldLocations);
        int sz = weldLocations.size();
        REP(i, 0, sz)
        {
            REP(j, i + 1, sz)
            {
                if(weldLocations[j] - weldLocations[i] > L ||
                        weldLocations[i] > L ||
                        100 - weldLocations[j] > L)
                    cnt++;
            }
        }

        int n = sz * (sz - 1) / 2;
        return (double)cnt / n;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, double p2)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    PipeCuts *obj;
    double answer;
    obj = new PipeCuts();
    clock_t startTime = clock();
    answer = obj->probability(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        int t0[] = {25, 50, 75};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 25;
        p2 = 1.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {25, 50, 75};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 50;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {25, 50, 75};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 24;
        p2 = 1.0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {99, 88, 77, 66, 55, 44, 33, 22, 11};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 50;
        p2 = 0.7222222222222222;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// A 100 meter long pipe must be cut in two places.  It can only be cut at certain places, where it was originally welded from smaller pipes.  If the two cut locations are chosen at random (each potential location has equal probability of being chosen), find the probability of a resulting pipe being longer than L meters.
//
//
// Create a method named probability that accepts a int[] weldLocations and int L as parameters.  It should calculate the probability of one or more resulting pipes being strictly longer than L if the two cut locations are chosen at random from weldLocations.  Each element in weldLocations represents the number of meters from the left end of the pipe.
//
// DEFINITION
// Class:PipeCuts
// Method:probability
// Parameters:vector <int>, int
// Returns:double
// Method signature:double probability(vector <int> weldLocations, int L)
//
//
// NOTES
// -Your return value must have a relative or absolute error less than 1e-9.
//
//
// CONSTRAINTS
// -weldLocations will have between 2 and 50 elements, inclusive.
// -Each element in weldLocations will be between 1 and 99, inclusive.
// -weldLocations will not contain duplicate elements.
// -L will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {25, 50, 75}
// 25
//
// Returns: 1.0
//
// Any random set of cuts results in a pipe being longer than 25 meters.
//
// 1)
// {25, 50, 75}
// 50
//
// Returns: 0.0
//
// This time, it is impossible to cut the pipe such that some resulting pipe is longer than 50 meters.
//
// 2)
// {25, 50, 75}
// 24
//
// Returns: 1.0
//
// 3)
// {99, 88, 77, 66, 55, 44, 33, 22, 11}
// 50
//
// Returns: 0.7222222222222222
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
