/*============================
 /\u7h0r : 5ud!p70 ch@ndr@ d@5
 =============================*/
//#include <bits/stdc++.h>
//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vii;
typedef vector<pii> vpii;
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define memsz(a,b,n) memset(a, b, n * sizeof(*a))
#define REP(i, a, n) for(int i = a; i < n; ++i)
#define REPE(i, a, n) for(int i = a; i <= n; ++i)
#define RREP(i, a, n) for(int i = a; i > n; --i)
#define RREPE(i, a, n) for(int i = a; i >= n; --i)
#define sf1(a) scanf("%d", &a)
#define sf2(a, b) scanf("%d %d", &a, &b)
#define sf3(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define sf4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d);
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ins insert
#define IT iterator
#define allof(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB lower_bound
#define UB upper_bound
#define POPC __builtin_popcount
#define loop(i, x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x).rbegin(); i!=(x).rend(); ++i)
//variables and functions
const double PI = 2.0 * acos(0.0);
const double EXP1 = exp(1);
template<typename T> inline T sqr(T n) { return n * n; }
inline double hypot(double x, double y) { return sqrt(sqr(x) + sqr(y)); }
template<typename T> inline T pmod(T n, T m) { return ((n % m) + m) % m; }
/*--------------------------------------------------------------------------------*/

class DoubleTree {
public:
	int maximalScore(vector <int> a, vector <int> b, vector <int> c, vector <int> d, vector <int> score) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	DoubleTree *obj;
	int answer;
	obj = new DoubleTree();
	clock_t startTime = clock();
	answer = obj->maximalScore(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	int p5;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1000,24,100,-200};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 1024;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1000,24,100,200};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 1324;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {-1000,-24,-100,-200};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {-1000,24,100,200};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 200;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,1,1,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,1,1,2,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,2,3,4,5,6};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {-3,2,2,-1,2,2,-1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,1,1,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,0,0,0,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,2,3,4,5,6};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {-3,2,2,-1,2,2,-1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 5;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have two trees with the same number of nodes.
// The nodes in each tree are labeled 0 through n-1.
// 
// 
// 
// You are given four vector <int>s with n-1 elements each: a, b, c, and d.
// The vector <int>s a and b describe the first tree:
// for each valid i, the first tree contains an edge between nodes labeled a[i] and b[i].
// The vector <int>s c and d describe the second tree in the same way.
// 
// 
// 
// Each of the values 0 through n-1 has an assigned integer score.
// These scores are given in an vector <int> score.
// Note that some of the scores may be negative.
// 
// 
// 
// Your goal is to select a subset S of the set {0, 1, ..., n-1} with the following properties:
// 
// In the first tree, the nodes with the labels in S induce a connected subgraph (a subtree of the original tree).
// In the second tree, the nodes with the labels in S also induce a connected subgraph.
// 
// 
// 
// 
// Return the largest possible sum of scores assigned to the elements of such a subset S.
// 
// DEFINITION
// Class:DoubleTree
// Method:maximalScore
// Parameters:vector <int>, vector <int>, vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int maximalScore(vector <int> a, vector <int> b, vector <int> c, vector <int> d, vector <int> score)
// 
// 
// NOTES
// -As there are only finitely many possible subsets S and the empty subset always has the desired properties, the return value is always correctly defined.
// 
// 
// CONSTRAINTS
// -n will be between 2 and 50, inclusive.
// -a and b will describe a tree with exactly n ndoes.
// -c and d will describe a tree with exactly n ndoes.
// -score will contain exactly n elements.
// -Each element in score will be between -1,000 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,0,1}
// {1,3,2}
// {0,0,3}
// {1,3,2}
// {1000,24,100,-200}
// 
// Returns: 1024
// 
// The best subset we can choose is {0,1}.
// The nodes labeled 0 and 1 are connected by an edge in each of the trees.
// Note that we cannot choose {0,1,2} as in the second tree we cannot get from 0 to 2 without going through 3.
// 
// 1)
// {0,0,1}
// {1,3,2}
// {0,0,3}
// {1,3,2}
// {1000,24,100,200}
// 
// Returns: 1324
// 
// As in this case all scores are positive, the best solution is to select all labels.
// 
// 2)
// {0,0,1}
// {1,3,2}
// {0,0,3}
// {1,3,2}
// {-1000,-24,-100,-200}
// 
// Returns: 0
// 
// As in this case all scores are negative, the best solution is to select no labels at all.
// 
// 3)
// {0,0,1}
// {1,3,2}
// {0,0,3}
// {1,3,2}
// {-1000,24,100,200}
// 
// Returns: 200
// 
// The optimal solution is to choose the subset {3} - a single node is connected.
// 
// 4)
// {0,0,1,1,2,2}
// {1,2,3,4,5,6}
// {0,0,1,1,2,2}
// {1,2,3,4,5,6}
// {-3,2,2,-1,2,2,-1}
// 
// Returns: 5
// 
// In this test case the two trees are identical. The answer is the maximum score of a subtree of this tree.
// 
// 5)
// {0,0,1,1,2,2}
// {1,2,3,4,5,6}
// {0,0,0,0,0,0}
// {1,2,3,4,5,6}
// {-3,2,2,-1,2,2,-1}
// 
// Returns: 5
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
